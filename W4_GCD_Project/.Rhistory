# [12] "UCI HAR Dataset/test/Inertial Signals/total_acc_x_test.txt"
# [13] "UCI HAR Dataset/test/Inertial Signals/total_acc_y_test.txt"
# [14] "UCI HAR Dataset/test/Inertial Signals/total_acc_z_test.txt"
# [15] "UCI HAR Dataset/test/subject_test.txt"
# [16] "UCI HAR Dataset/test/X_test.txt"
# [17] "UCI HAR Dataset/test/y_test.txt"
# [18] "UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt"
# [19] "UCI HAR Dataset/train/Inertial Signals/body_acc_y_train.txt"
# [20] "UCI HAR Dataset/train/Inertial Signals/body_acc_z_train.txt"
# [21] "UCI HAR Dataset/train/Inertial Signals/body_gyro_x_train.txt"
# [22] "UCI HAR Dataset/train/Inertial Signals/body_gyro_y_train.txt"
# [23] "UCI HAR Dataset/train/Inertial Signals/body_gyro_z_train.txt"
# [24] "UCI HAR Dataset/train/Inertial Signals/total_acc_x_train.txt"
# [25] "UCI HAR Dataset/train/Inertial Signals/total_acc_y_train.txt"
# [26] "UCI HAR Dataset/train/Inertial Signals/total_acc_z_train.txt"
# [27] "UCI HAR Dataset/train/subject_train.txt"
# [28] "UCI HAR Dataset/train/X_train.txt"
# [29] "UCI HAR Dataset/train/y_train.txt"
# ******************************************************************
# Step 2: Load Test & Train Datasets into R
# ******************************************************************
library(data.table)
Test_subjectDF <- read.table("rawdata/UCI HAR Dataset/test/subject_test.txt")
Test_XDF <- read.table("rawdata/UCI HAR Dataset/test/X_test.txt")
Test_YDF <- read.table("rawdata/UCI HAR Dataset/test/Y_test.txt")
Train_subjectDF <- read.table("rawdata/UCI HAR Dataset/train/subject_train.txt")
Train_XDF <- read.table("rawdata/UCI HAR Dataset/train/X_train.txt")
Train_YDF <- read.table("rawdata/UCI HAR Dataset/train/Y_train.txt")
# ***************************************************************************
# Check Step 2: Show files imported and their dimensions are correct
# ***************************************************************************
# > dim(Test_subjectDF)
# [1] 2947    1
#
# > dim(Test_XDF)
# [1] 2947  561
#
# > dim(Test_YDF)
# [1] 2947    1
#
# > dim(Train_subjectDF)
# [1] 7352    1
#
# > dim(Train_XDF)
# [1] 7352  561
#
# > dim(Train_YDF)
# [1] 7352    1
# ***************************************************************************
#  Step 3: Bind X,Y,Subject data frames into one data frame
# ***************************************************************************
XDF <- rbind(Test_XDF,Train_XDF)
YDF <- rbind(Test_YDF,Train_YDF)
subjectDF <- rbind(Test_subjectDF,Train_subjectDF)
RawDF <- cbind(XDF,YDF,subjectDF)
# ***************************************************************************
# Check Step 3: Show files merged and their dimensions are correct
# ***************************************************************************
# > dim(XDF)            # should be 2947 + 7352 = 102999 and var @ 561
# [1] 10299   561
#
# > dim(YDF)            # should be 2947 + 7352 = 102999 and var @ 1
# [1] 10299     1
#
# > dim(subjectDF)      # should be 2947 + 7352 = 102999 and var @ 1
# [1] 10299     1
#
# > dim(RawDF)          # should be 102999 rows and var 561 + 1 + 1 = 563
# [1] 10299   563
#
# ***************************************************************************
#  Step 4: Write combined dataframe to rawdata folder as text file
# ***************************************************************************
fwrite(RawDF,"rawdata/combined_rawdata.txt")
# ***************************************************************************
# Check Step 4: Show file was created
# ***************************************************************************
# > list.files(path = "rawdata/", pattern = NULL, all.files = FALSE,
# +                full.names = FALSE, recursive = FALSE,
# +                ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
#
# [1] "combined_rawdata.txt" "ProjectFiles.zip"     "UCI HAR Dataset"
#
# ***************************************************************************
#  Step 5a: Create New Features file for combined Raw Data
# ***************************************************************************
Features <- read.table("rawdata/UCI HAR Dataset/features.txt")
Additions <- data.frame(V1 = c(max(Features$V1)+1, max(Features$V1)+2),
V2 = c("Activity_code","Subject_ID"))
RawDF_cb <- rbind(Features,Additions)
# ****************************************************************************
#  Step 5b: Export combined Features to file
# ****************************************************************************
fwrite(RawDF_cb,"rawdata/combined_features.txt")
# ****************************************************************************
#  Step 5c: Export combined Features to file ready for cookbook.md list object
# ****************************************************************************
source("CreateCodeBook.R")
CodeBook(RawDF_cb,"rawdata/cbImport.txt")
# ****************************************************************************
#  Check Step 5a: Check Features and Additions data frames combined correctly.
# ****************************************************************************
# > dim(Features)
# [1] 561   2
#
# > dim(Additions)
# [1] 2 2
#
# > print(Additions)
# V1            V2
# 1 562 Activity_code
# 2 563    Subject_ID
#
# > dim(RawDF_cb)
# [1] 563   2
#
# > tail(RawDF_cb,4)                    #Dimension ok and last 2 rows added ok
#      V1                   V2
# 560 560 angle(Y,gravityMean)
# 561 561 angle(Z,gravityMean)
# 562 562        Activity_code
# 563 563           Subject_ID
# ****************************************************************************
#  Check Step 5b: Export of combined Features file successful
# ****************************************************************************
# > list.files(path = "rawdata/", pattern = NULL, all.files = FALSE,
# +                full.names = FALSE, recursive = FALSE,
# +                ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
#
# [1] "combined_features.txt" "combined_rawdata.txt"  "ProjectFiles.zip"
# [4] "UCI HAR Dataset"
#
# ****************************************************************************
#  Check Step 5c: Export of combined Features file ready successful
# ****************************************************************************
# >  list.files(path = "rawdata/", pattern = NULL, all.files = FALSE,
# +                 full.names = FALSE, recursive = FALSE,
# +                 ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
#
# [1] "cbImport.txt"          "combined_features.txt" "combined_rawdata.txt"
# [4] "ProjectFiles.zip"      "UCI HAR Dataset"
# ***************************************************************************
#  Step 6: Clear Global environment
# ***************************************************************************
rm(list=ls(all=TRUE))
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
#                           End of Requirement 1
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
RawDF <- fread("rawdata/combined_rawdata.txt")
Features <- read.table("rawdata/combined_features.txt")
dim(RawDF)
dim(Features)
head(Features)
Features <- read.table("rawdata/UCI HAR Dataset/features.txt")
Additions <- data.frame(V1 = c(max(Features$V1)+1, max(Features$V1)+2),
V2 = c("Activity_code","Subject_ID"))
head(Features)
head(Additions)
RawDF_cb <- rbind(Features,Additions)
head(RawDF_cb)
fwrite(RawDF_cb,"rawdata/combined_features.txt")
Features <- read.table("rawdata/combined_features.txt")
head(Features)
View(Features)
Features <- fread("rawdata/combined_features.txt")
View(Features)
RawDF <- fread("rawdata/combined_rawdata.txt")
Features <- fread("rawdata/combined_features.txt")
dim(Features)
names(RawDF) <- Features
names(RawDF) <- Features$V2
head(names(RawDF))
head(names(RawDF),3)
tail(names(RawDF),3)
dim(RawDF)
View(Features)
rm(Features)
Features <- fread("rawdata/combined_features.txt")
grepl("mean",Features$V2)
Sum(grepl("mean" | "std",Features$V2))
sum(grepl("mean" | "std",Features$V2))
sum(grepl("mean",Features$V2))
sum(grepl("std",Features$V2))
grep("std",Features$V2)
library(dplyr)
new <- Features$V2 %>%
select(grep("std"))
new <- Features %>%
filter(V2 == grep("std"))
new <- Features %>%
filter(V2 == grep("std",Features$V2))
View(new)
new <- Features %>%
filter(grep("std",Features$V2))
new <- Features %>%
filter(grepl("std",Features$V2))
View(new)
new <- Features %>%
filter(grepl("std",Features$V2)|grepl("mean",Features$V2))
View(new)
new <- RawDF %>%
select_vars() %>%
Features %>%
filter(grepl("std",Features$V2)|grepl("mean",Features$V2))
new <- Features %>%
filter(grepl("std",Features$V2)|grepl("mean",Features$V2)) %>%
RawDF %>%
select_vars()
new <- Features %>%
filter(grepl("std",Features$V2)|grepl("mean",Features$V2)) %>%
select(RawDF)
new <- Features %>%
filter(grep("std",Features$V2)|grep("mean",Features$V2)) %>%
select(RawDF)
new <- Features$V2 %>%
filter(grep("std",Features$V2)|grep("mean",Features$V2)) %>%
select(RawDF)
new <- Features$V2 %>%
filter(grepl("std",Features$V2)|grepl("mean",Features$V2)) %>%
select(RawDF)
new <- Features %>%
filter(grepl("std",Features$V2)|grepl("mean",Features$V2)) %>%
select(RawDF)
new <- Features %>%
filter(grepl("std",Features$V2)|grepl("mean",Features$V2))
View(new)
new <- Features %>%
filter(grepl("std",Features$V2)|grepl("mean",Features$V2)) %>%
sub <- RawDF %>%
select(new)
new <- Features %>%
filter(grepl("std",Features$V2)|grepl("mean",Features$V2)) %>%
sub <- RawDF %>%
select(new$V2)
new <- Features %>%
filter(grepl("std",Features$V2)|grepl("mean",Features$V2)) %>%
sub <- RawDF %>%
select(new$V1)
new <- Features %>%
filter(grepl("std",Features$V2)|grepl("mean",Features$V2)) %>%
sub <- RawDF %>%
select(,new$V2)
new <- Features %>%
filter(grepl("std",Features$V2)|grepl("mean",Features$V2)) %>%
sub <- RawDF %>%
select(new$V2)
View(new)
new <- Features %>%
filter(grepl("std",Features$V2)|grepl("mean",Features$V2)) %>%
sub <- RawDF[,new$V2])
new <- Features %>%
filter(grepl("std",Features$V2)|grepl("mean",Features$V2)) %>%
sub <- RawDF[,new$V1])
View(new)
new <- Features %>%
filter(grep("std",Features$V2)|grep("mean",Features$V2))
sub <- RawDF[,grep("std",Features$V2)|grep("mean",Features$V2)]
View(new)
grep("std",Features$V2)|grep("mean",Features$V2)
n <- grep("std",Features$V2)|grep("mean",Features$V2)
View(new)
sub <- RawDF[,new$V1]
sub
sub <- RawDF[,new$V1]
sub
sub <- subset(x = RawDF,V1==new$V1)
RawDF <- fread("rawdata/combined_rawdata.txt")
Features <- fread("rawdata/combined_features.txt")
names(RawDF) <- Features$V2
rm(Features)
new <- RawDF %>%
filter(grep("std",Features$V2)|grep("mean",Features$V2))
filter(names == grep("std",names(RawDF)|grep("mean",names(RawDF))
)
)
new <- RawDF %>%
filter(contains("mean"))
new <- RawDF %>%
select(contains("mean"))
new <- RawDF %>%
select_if(contains("mean"))
new <- as.tibble(RawDF) %>%
select_if(contains("mean"))
new <- tbl_df(RawDF) %>%
select_if(contains("mean"))
new <- tbl_df(RawDF) %>%
select_if(names(contains("mean")))
new <- tbl_df(RawDF)
new <- tbl_df(RawDF)
new <- RawDF[,grep("mean", names(RawDF))]
new
new <- RawDF[,grepl("mean", names(RawDF))]
new
new <- subset(RawDF,grepl("mean", names(RawDF)))
new <- subset(RawDF,select= grepl("mean", names(RawDF)))
View(new)
names(RawDF)| grepl("std", names(RawDF)))
names(RawDF) | grepl("std", names(RawDF)))
new <- subset(RawDF,select= grepl("mean",
names(RawDF)))
new <- subset(RawDF,select= c(grepl("mean", names(RawDF)),
grepl("std", names(RawDF))))
new <- subset(RawDF,select= c(grepl("mean", names(RawDF))))
new <- subset(RawDF,select= c(grepl("mean", names(RawDF),grepl("std", names(RawDF))))
new <- subset(RawDF,select= c(grepl("mean", names(RawDF))))
new <- subset(RawDF,select= c(grepl("mean", names(RawDF))))
new <- subset(RawDF,select= c(grepl("mean", names(RawDF)),
grepl("mean", names(RawDF))))
new <- subset(RawDF,select= c(grep("mean", names(RawDF)),
grep("mean", names(RawDF))))
new <- subset(RawDF,select= c(grep("mean", names(RawDF)),
grep("std", names(RawDF))))
new <- subset(RawDF,select= c(grep("mean", names(RawDF)),
grep("std", names(RawDF)),"Subject_ID",
"Activity_code"))
new <- subset(RawDF,select= c(grep("mean", names(RawDF)),
grep("std", names(RawDF)),"Subject_ID","Activity_code"))
new <- subset(RawDF,select= c(grep("mean", names(RawDF)),
grep("std", names(RawDF)),"Subject_ID")))
new <- subset(RawDF,select= c(grep("mean", names(RawDF)),
grep("std", names(RawDF)),"Subject_ID"))
new <- subset(RawDF,select= c(grep("mean", names(RawDF)),
grep("std", names(RawDF))))
new <- subset(RawDF,select= c(grepl("mean", names(RawDF)),
grepl("std", names(RawDF))))
grep("mean", names(RawDF)
)
new <- subset(RawDF,select= c(grep("mean", names(RawDF)),
grep("std", names(RawDF)),562,563))
names(new)
new <- subset(RawDF,select= c(562,563,grep("mean", names(RawDF)),
grep("std", names(RawDF))))
names(new)
grep("std", names(RawDF))
MStcolNums <-  c(562,
563,
grep("mean", names(RawDF)),
grep("std", names(RawDF)))
MStcolNums
MStcolNums <-  c(grep("Subject_ID", names(RawDF)),
grep("Activity_code", names(RawDF)),
grep("mean", names(RawDF)),
grep("std", names(RawDF)))
MStcolNums
MScolNums <-  c(grep("Subject_ID", names(RawDF)),
grep("Activity_code", names(RawDF)),
grep("mean", names(RawDF)),
grep("std", names(RawDF)))
new <- subset(RawDF,select= MScolNums)
head(names(new))
MScolNums <- c(grep("Subject_ID", names(RawDF)),
grep("Activity_code", names(RawDF)),
grep("mean", names(RawDF)),
grep("std", names(RawDF)))
MeanStdDF <- subset(RawDF,select= MScolNums)
dim(MScolNums)
MScolNums <- c(grep("Subject_ID", names(RawDF)),
grep("Activity_code", names(RawDF)),
grep("mean", names(RawDF)),
grep("std", names(RawDF)))
dim(MScolNums)
length(MScolNums)
dim(MeanStdDF)
grep("std", names(MeanStdDF))
grep(!"std", names(MeanStdDF))
if("std" %in% colnames(MeanStdDF)) {
cat("Yep, it's in there!\n");
}
if("std" %in% names(MeanStdDF)) {
cat("Yep, it's in there!\n")
} else {
print("There are no instances")
}
if(length(grep("std",names(MeanStdDF)))>0){
cat("Yep, it's in there!\n")
} else {
print("There are no instances of")
}
if(length(!grep("std",names(MeanStdDF)))>0){
print("Yes, there are instances")
} else {
print("There are no instances")
}
grep("std",names(MeanStdDF)
)
length(grep("std",names(MeanStdDF))
)
print(length(grep("std",names(MeanStdDF))))
lenvars <- c(print(length(grep("std",names(MeanStdDF)))),
print(length(grep("mean",names(MeanStdDF)))),
print(length(grep("Subject_ID",names(MeanStdDF)))),
print(length(grep("Activity_code",names(MeanStdDF)))))
lenvars <- paste(length(grep("std",names(MeanStdDF))),
length(grep("mean",names(MeanStdDF))),
length(grep("Subject_ID",names(MeanStdDF))),
length(grep("Activity_code",names(MeanStdDF))))
lenvars
sum(lenvars)
sum(as.numric(lenvars))
sum(as.numeric(lenvars))
sum(as.numeric(lenvars))
lenvars <- c(length(grep("std",names(MeanStdDF))),
length(grep("mean",names(MeanStdDF))),
length(grep("Subject_ID",names(MeanStdDF))),
length(grep("Activity_code",names(MeanStdDF))))
lenvars
sum(lenvars)
duplicated(names(MeanStdDF))
sum(duplicated(names(MeanStdDF)))
rm(RawDF)
fwrite(MeanStdDF,"rawdata/Extracted_Data.txt")
> list.files(path = "rawdata/", pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
list.files(path = "rawdata/", pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
rm(list=ls(all=TRUE))
# ---------------------------------------------------------------------------
# *************************---------ooo---------*****************************
#
#                           Start of Requirement 2
#           Extract only the measurements on the mean and standard deviation
#                          for each measurement.
#
# *************************---------ooo---------*****************************
# ---------------------------------------------------------------------------
# ***************************************************************************
#  Step 1a: Import combined RawData file and new Features file
# ***************************************************************************
RawDF <- fread("rawdata/combined_rawdata.txt")
Features <- fread("rawdata/combined_features.txt")
# ***************************************************************************
#  Check Step 1a: Show files and dimensions imported correctly
# ***************************************************************************
# > dim(RawDF)
# [1] 10299   563
# > dim(Features)
# [1] 563   2
# ***************************************************************************
#  Step 1b: Assign new Features to Combined RawData variables
# ***************************************************************************
names(RawDF) <- Features$V2
rm(Features)
# ***************************************************************************
#  Step 1b: Check new variables assigned correctly
# ***************************************************************************
# > head(names(RawDF),3)
# [1] "tBodyAcc-mean()-X" "tBodyAcc-mean()-Y" "tBodyAcc-mean()-Z"
# > tail(names(RawDF),3)
# [1] "angle(Z,gravityMean)" "Activity_code"        "Subject_ID"
# > dim(RawDF)
# [1] 10299   563
# ***************************************************************************
#  Step 2a: Find variables with words 'mean' and 'std', and
#  filter data frame and include "Subject_ID" and "Activity_code"
# ***************************************************************************
MScolNums <- c(grep("Subject_ID", names(RawDF)),
grep("Activity_code", names(RawDF)),
grep("mean", names(RawDF)),
grep("std", names(RawDF)))
MeanStdDF <- subset(RawDF,select= MScolNums)
# ***************************************************************************
#  Check Step 2a: New Data frame with variables only with 'mean' and 'std',
#  including "Subject_ID" and "Activity_code"
# ***************************************************************************
# > length(MScolNums)
# [1] 81
# > dim(MeanStdDF)
# [1] 10299    81
#
# The following will check that MeanStdDF only contains the required variables:
#
# > lenvars <- c(length(grep("std",names(MeanStdDF))),
# +              length(grep("mean",names(MeanStdDF))),
# +              length(grep("Subject_ID",names(MeanStdDF))),
# +              length(grep("Activity_code",names(MeanStdDF))))
#
# > lenvars
# [1] 33 46  1  1
#
# > sum(lenvars)
# [1] 81
#
# The following will check if there are any duplicate variables:
# > sum(duplicated(names(MeanStdDF)))
# [1] 0
# ****************************************************************************
#  Step 2b: Export Extracted data frame to file
# ****************************************************************************
fwrite(MeanStdDF,"rawdata/Extracted_Data.txt")
# ****************************************************************************
#  Check Step 2b: Export of Extracted Data file successful
# ****************************************************************************
# > list.files(path = "rawdata/", pattern = NULL, all.files = FALSE,
# +                 full.names = FALSE, recursive = FALSE,
# +                 ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
#
# [1] "cbImport.txt"          "combined_features.txt" "combined_rawdata.txt"
# [4] "Extracted_Data.txt"    "ProjectFiles.zip"      "UCI HAR Dataset"
#
# ****************************************************************************
#  Step 3: Export variables of Extracted Data to file;
#            ready for cookbook.md list object
# ****************************************************************************
source("CreateCodeBook.R")
CodeBook(MeanStdDF,"rawdata/ExtractedcbImport.txt")
CodeBook(names(MeanStdDF),"rawdata/ExtractedcbImport.txt")
View(CodeBook)
View(CodeBook)
